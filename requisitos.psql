-- REQUISTO 1

CREATE OR REPLACE FUNCTION FN_GERA_NUMERO_TELEFONE(DDD VARCHAR, PREFIXO VARCHAR)
RETURNS VARCHAR
LANGUAGE PLPGSQL
AS $$
DECLARE
NOVO_NUMERO VARCHAR;
SUFIXO_NUMERO VARCHAR;
NUMEROS RECORD;

BEGIN
	--PEGANDO TODOS AS OCORRENCIAS DA TABELA CHIP
	--SELECT * INTO NUMEROS FROM CHIP;
	--MÉTODO QUE VAI GERAR OS ÚLTIMOS 4 DIGITOS DO NÚMERO
	SELECT FLOOR(RANDOM() *10000)::VARCHAR INTO SUFIXO_NUMERO;
	--CONCATENANDO DDD+PREFIXO+SUFIXO GERADO DE FORMA RANDOM
	SELECT CONCAT(DDD,PREFIXO,SUFIXO_NUMERO) INTO NOVO_NUMERO;
	
	FOR NUMEROS IN SELECT IDNUMERO FROM CHIP LOOP
		IF NUMEROS.IDNUMERO = NOVO_NUMERO THEN
			RAISE EXCEPTION 'NUMERO JÁ REGISTRADO NA BASE';
			
		END IF;
	END LOOP;
	RETURN NOVO_NUMERO;
END$$;
	
SELECT FN_GERA_NUMERO_TELEFONE('83','99852');

-- REQUSITO 5

CREATE OR REPLACE PROCEDURE PR_ASSOC_NUMERO_CLIENTE(ID_CLIENTE INTEGER, DDD VARCHAR, PREFIXO VARCHAR)
LANGUAGE PLPGSQL
AS $$
DECLARE
	IS_CANCELADO VARCHAR;
	NUMERO VARCHAR;
	OPERADORA_CLIENTE INTEGER;
	PLANO_CLIENTE INTEGER;
BEGIN
	SELECT CLIENTE.CANCELADO INTO IS_CANCELADO FROM CLIENTE WHERE CLIENTE.IDCLIENTE = ID_CLIENTE;
	IF IS_CANCELADO = 'N' THEN
		-- GERANDO O NUMERO TELEFONICO E PEGANDO UM PLANO,OPERADORA PARA SER INSERIDO
		SELECT FN_GERA_NUMERO_TELEFONE(DDD, PREFIXO) INTO NUMERO;
		SELECT * INTO PLANO_CLIENTE FROM (SELECT IDPLANO FROM PLANO ORDER BY RANDOM() LIMIT 1) AS "PLANO";
		SELECT * INTO OPERADORA_CLIENTE FROM(SELECT IDOPERADORA FROM OPERADORA ORDER BY RANDOM() LIMIT 1) AS "OPERADORA_CLIENTE";
		--INSERINDO NA TABELA CHIP
		INSERT INTO CHIP(IDNUMERO, IDOPERADORA, DISPONIVEL, IDPLANO, ATIVO)
		VALUES(NUMERO, OPERADORA_CLIENTE, PLANO_CLIENTE, 'N','S');
		COMMIT;
		--INSERINDO NA TABELA CLIENTE_CHIP
		INSERT INTO CLIENTE_CHIP(IDNUMERO, IDCLIENTE)
		VALUES(NUMERO,IDCLIENTE);
		COMMIT;
	ELSE
		RAISE EXCEPTION 'O CLIENTE APRESENTA O STATUS CANCELADO';
	END IF;
END $$;


--VIEW 1
CREATE OR REPLACE VIEW VW_1
AS SELECT PLANO.IDPLANO, PLANO.DESCRICAO, COUNT(CHIP.IDPLANO) AS QUANT_PLANOS_ATIVOS,(COUNT(CHIP.*)*PLANO.VALOR) AS VALOR_ARRECADADO
FROM PLANO JOIN CHIP
ON PLANO.IDPLANO = CHIP.IDPLANO
GROUP BY PLANO.IDPLANO, CHIP.ATIVO, CHIP.IDPLANO
HAVING CHIP.ATIVO = 'S';


--VIEW 3
CREATE OR REPLACE VIEW VW_3
AS
SELECT CLIENTE.IDCLIENTE, CLIENTE.NOME, ESTADO.UF, CHIP.IDNUMERO,PLANO.DESCRICAO, TO_CHAR(current_date - datacadastro, 'MM/YYYY') AS Tempo_na_empresa
FROM CLIENTE JOIN CIDADE
ON CLIENTE.IDCIDADE = CIDADE.IDCIDADE
JOIN ESTADO
ON ESTADO.UF = CIDADE.UF
JOIN CLIENTE_CHIP
ON CLIENTE.IDCLIENTE = CLIENTE_CHIP.IDCLIENTE
JOIN CHIP
ON CHIP.IDNUMERO = CLIENTE_CHIP.IDNUMERO
JOIN PLANO
ON CHIP.IDPLANO = PLANO.IDPLANO
WHERE CLIENTE.CANCELADO = 'N'

-- VIEW DE CONTROLE
CREATE OR REPLACE VIEW planos_valores AS
SELECT 
pl.idplano,
pl.descricao,
ta1.valor AS fmin1,
ta2.valor AS fmin2,
pl.valor
FROM plano pl 
INNER JOIN tarifa ta1 ON pl.fminin = ta1.idtarifa
INNER JOIN tarifa ta2 ON pl.fminout = ta2.idtarifa
